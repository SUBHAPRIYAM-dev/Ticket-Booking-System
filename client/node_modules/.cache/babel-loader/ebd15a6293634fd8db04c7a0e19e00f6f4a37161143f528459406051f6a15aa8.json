{"ast":null,"code":"var _jsxFileName = \"E:\\\\Ticket booking\\\\client\\\\src\\\\pages\\\\QRScanner.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport QrScanner from \"react-qr-scanner\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = () => {\n  _s();\n  const [message, setMessage] = useState(null);\n  const [scannedCodes, setScannedCodes] = useState(new Set());\n  const handleScan = async data => {\n    if (data) {\n      const qrCode = data.text;\n      if (scannedCodes.has(qrCode)) {\n        setMessage({\n          type: \"error\",\n          text: \"This QR Code has already been scanned!\"\n        });\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/admin/verify\", {\n          qrCode\n        });\n        setMessage({\n          type: \"success\",\n          text: response.data.message\n        });\n        setScannedCodes(prev => new Set(prev.add(qrCode)));\n      } catch (error) {\n        var _error$response, _error$response$data;\n        setMessage({\n          type: \"error\",\n          text: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error verifying QR code!\"\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-white shadow-lg mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-blue-600 mb-4\",\n      children: \"QR Code Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `p-3 ${message.type === \"error\" ? \"bg-red-500\" : \"bg-green-500\"}`,\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n      delay: 300,\n      onScan: handleScan,\n      style: {\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(QRScanner, \"UmK18L6S8B/znQtGJiV32sT0zHM=\");\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["useState","QrScanner","axios","jsxDEV","_jsxDEV","QRScanner","_s","message","setMessage","scannedCodes","setScannedCodes","Set","handleScan","data","qrCode","text","has","type","response","post","prev","add","error","_error$response","_error$response$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","delay","onScan","style","width","_c","$RefreshReg$"],"sources":["E:/Ticket booking/client/src/pages/QRScanner.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport QrScanner from \"react-qr-scanner\";\r\nimport axios from \"axios\";\r\n\r\nconst QRScanner = () => {\r\n  const [message, setMessage] = useState(null);\r\n  const [scannedCodes, setScannedCodes] = useState(new Set());\r\n\r\n  const handleScan = async (data) => {\r\n    if (data) {\r\n      const qrCode = data.text;\r\n\r\n      if (scannedCodes.has(qrCode)) {\r\n        setMessage({ type: \"error\", text: \"This QR Code has already been scanned!\" });\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/admin/verify\", { qrCode });\r\n        setMessage({ type: \"success\", text: response.data.message });\r\n        setScannedCodes((prev) => new Set(prev.add(qrCode)));\r\n      } catch (error) {\r\n        setMessage({\r\n          type: \"error\",\r\n          text: error.response?.data?.message || \"Error verifying QR code!\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 bg-white shadow-lg mt-10\">\r\n      <h2 className=\"text-2xl font-bold text-blue-600 mb-4\">QR Code Scanner</h2>\r\n      {message && <p className={`p-3 ${message.type === \"error\" ? \"bg-red-500\" : \"bg-green-500\"}`}>{message.text}</p>}\r\n      <QrScanner delay={300} onScan={handleScan} style={{ width: \"100%\" }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRScanner;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAIW,GAAG,CAAC,CAAC,CAAC;EAE3D,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;IACjC,IAAIA,IAAI,EAAE;MACR,MAAMC,MAAM,GAAGD,IAAI,CAACE,IAAI;MAExB,IAAIN,YAAY,CAACO,GAAG,CAACF,MAAM,CAAC,EAAE;QAC5BN,UAAU,CAAC;UAAES,IAAI,EAAE,OAAO;UAAEF,IAAI,EAAE;QAAyC,CAAC,CAAC;QAC7E;MACF;MAEA,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,wCAAwC,EAAE;UAAEL;QAAO,CAAC,CAAC;QACvFN,UAAU,CAAC;UAAES,IAAI,EAAE,SAAS;UAAEF,IAAI,EAAEG,QAAQ,CAACL,IAAI,CAACN;QAAQ,CAAC,CAAC;QAC5DG,eAAe,CAAEU,IAAI,IAAK,IAAIT,GAAG,CAACS,IAAI,CAACC,GAAG,CAACP,MAAM,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC,OAAOQ,KAAK,EAAE;QAAA,IAAAC,eAAA,EAAAC,oBAAA;QACdhB,UAAU,CAAC;UACTS,IAAI,EAAE,OAAO;UACbF,IAAI,EAAE,EAAAQ,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBV,IAAI,cAAAW,oBAAA,uBAApBA,oBAAA,CAAsBjB,OAAO,KAAI;QACzC,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EAED,oBACEH,OAAA;IAAKqB,SAAS,EAAC,8BAA8B;IAAAC,QAAA,gBAC3CtB,OAAA;MAAIqB,SAAS,EAAC,uCAAuC;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzEvB,OAAO,iBAAIH,OAAA;MAAGqB,SAAS,EAAE,OAAOlB,OAAO,CAACU,IAAI,KAAK,OAAO,GAAG,YAAY,GAAG,cAAc,EAAG;MAAAS,QAAA,EAAEnB,OAAO,CAACQ;IAAI;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/G1B,OAAA,CAACH,SAAS;MAAC8B,KAAK,EAAE,GAAI;MAACC,MAAM,EAAEpB,UAAW;MAACqB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEV,CAAC;AAACxB,EAAA,CAjCID,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AAmCf,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}