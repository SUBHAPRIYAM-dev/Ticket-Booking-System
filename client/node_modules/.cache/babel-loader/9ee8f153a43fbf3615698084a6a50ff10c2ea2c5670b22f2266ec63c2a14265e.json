{"ast":null,"code":"import axios from \"axios\";\n\n// Create an instance of axios with the base URL\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\"\n});\n\n// Add an interceptor to include the Authorization token in every request if it's available\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"adminToken\"); // Get the token from localStorage\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`; // Attach token to headers if available\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Login Admin\nexport const loginAdmin = async data => {\n  try {\n    const response = await API.post(\"/admin/login\", data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error logging in:\", error.response ? error.response.data : error);\n    throw error; // Propagate error for further handling\n  }\n};\n\n// Get List of Students\nexport const getStudents = async () => {\n  try {\n    const response = await API.get(\"/students\");\n    return response.data; // Return the student list if successful\n  } catch (error) {\n    console.error(\"Error fetching students:\", error.response ? error.response.data : error);\n    throw error; // Propagate error for further handling\n  }\n};\n\n// Register a Student\nexport const registerStudent = async data => {\n  try {\n    const response = await API.post(\"/students/register\", data);\n    return response.data; // Return the response if successful\n  } catch (error) {\n    console.error(\"Error registering student:\", error.response ? error.response.data : error);\n    throw error; // Propagate error for further handling\n  }\n};\n\n// Approve a Student\nexport const approveStudent = async id => {\n  try {\n    const response = await API.put(`/admin/approve/${id}`);\n    return response.data; // Return the response if successful\n  } catch (error) {\n    console.error(\"Error approving student:\", error.response ? error.response.data : error);\n    throw error; // Propagate error for further handling\n  }\n};\n\n// Reject a Student\nexport const rejectStudent = async id => {\n  try {\n    const response = await API.put(`/admin/reject/${id}`);\n    return response.data; // Return the response if successful\n  } catch (error) {\n    console.error(\"Error rejecting student:\", error.response ? error.response.data : error);\n\n    // Specific error handling if it's a 400 (Bad Request)\n    if (error.response && error.response.status === 400) {\n      // Example: Handle rejection if the student is already rejected\n      throw new Error(\"This student has already been rejected.\");\n    }\n    throw error; // Propagate other errors for further handling\n  }\n};","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","loginAdmin","data","response","post","console","getStudents","get","registerStudent","approveStudent","id","put","rejectStudent","status","Error"],"sources":["E:/Ticket booking/client/src/services/api.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create an instance of axios with the base URL\r\nconst API = axios.create({ baseURL: \"http://localhost:5000/api\" });\r\n\r\n// Add an interceptor to include the Authorization token in every request if it's available\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"adminToken\"); // Get the token from localStorage\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`; // Attach token to headers if available\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Login Admin\r\nexport const loginAdmin = async (data) => {\r\n  try {\r\n    const response = await API.post(\"/admin/login\", data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error logging in:\", error.response ? error.response.data : error);\r\n    throw error; // Propagate error for further handling\r\n  }\r\n};\r\n\r\n// Get List of Students\r\nexport const getStudents = async () => {\r\n  try {\r\n    const response = await API.get(\"/students\");\r\n    return response.data; // Return the student list if successful\r\n  } catch (error) {\r\n    console.error(\"Error fetching students:\", error.response ? error.response.data : error);\r\n    throw error; // Propagate error for further handling\r\n  }\r\n};\r\n\r\n// Register a Student\r\nexport const registerStudent = async (data) => {\r\n  try {\r\n    const response = await API.post(\"/students/register\", data);\r\n    return response.data; // Return the response if successful\r\n  } catch (error) {\r\n    console.error(\"Error registering student:\", error.response ? error.response.data : error);\r\n    throw error; // Propagate error for further handling\r\n  }\r\n};\r\n\r\n// Approve a Student\r\nexport const approveStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/approve/${id}`);\r\n    return response.data; // Return the response if successful\r\n  } catch (error) {\r\n    console.error(\"Error approving student:\", error.response ? error.response.data : error);\r\n    throw error; // Propagate error for further handling\r\n  }\r\n};\r\n\r\n// Reject a Student\r\nexport const rejectStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/reject/${id}`);\r\n    return response.data; // Return the response if successful\r\n  } catch (error) {\r\n    console.error(\"Error rejecting student:\", error.response ? error.response.data : error);\r\n\r\n    // Specific error handling if it's a 400 (Bad Request)\r\n    if (error.response && error.response.status === 400) {\r\n      // Example: Handle rejection if the student is already rejected\r\n      throw new Error(\"This student has already been rejected.\");\r\n    }\r\n\r\n    throw error; // Propagate other errors for further handling\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}