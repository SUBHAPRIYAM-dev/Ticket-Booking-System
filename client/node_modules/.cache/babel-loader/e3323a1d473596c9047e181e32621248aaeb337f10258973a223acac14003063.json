{"ast":null,"code":"var _jsxFileName = \"E:\\\\Ticket booking\\\\client\\\\src\\\\pages\\\\QRScanner.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { QrReader } from \"react-qr-reader\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = () => {\n  _s();\n  const [result, setResult] = useState(null); // To store the result of the QR scan\n  const [loading, setLoading] = useState(false); // To show a loading state\n  const [errorMessage, setErrorMessage] = useState(\"\"); // To show error messages\n\n  // Handle successful scan\n  const handleScan = async data => {\n    if (data) {\n      setResult(data); // Update the result state with the scanned QR code\n      setLoading(true); // Show loading state while processing the result\n      try {\n        // Sending the scanned roll number to the backend API for validation\n        const response = await axios.post(\"http://localhost:5000/api/verify-ticket\", {\n          rollNo: data\n        });\n        setLoading(false); // Hide loading after the API call\n        alert(response.data.message); // Show alert with the API response message\n      } catch (error) {\n        setLoading(false); // Hide loading if there's an error\n        setErrorMessage(\"Invalid Ticket! Please try again.\"); // Show error message\n      }\n    }\n  };\n\n  // Handle error during scanning\n  const handleError = err => {\n    console.error(err); // Log error to the console\n    setErrorMessage(\"Error scanning QR code. Please check your camera.\"); // Display error message\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-md mx-auto mt-10 p-6 bg-white shadow-lg rounded-lg text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-blue-600 mb-4\",\n      children: \"QR Code Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(QrReader, {\n        delay: 300 // The delay time for scanning (in ms)\n        ,\n        onScan: handleScan // Callback when QR code is successfully scanned\n        ,\n        onError: handleError // Callback when an error occurs while scanning\n        ,\n        style: {\n          width: \"100%\",\n          height: \"auto\",\n          borderRadius: \"8px\",\n          border: \"2px solid #ddd\"\n        } // Styling for QR reader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-0 left-0 right-0 bottom-0 bg-black opacity-50 flex items-center justify-center text-white text-xl rounded-lg\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-green-600 font-bold\",\n      children: [\"Scanned Roll No: \", result]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-red-600 font-bold\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(QRScanner, \"G4tv9Gl5ViyfRji6kUyRRFjIWZ4=\");\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["useState","QrReader","axios","jsxDEV","_jsxDEV","QRScanner","_s","result","setResult","loading","setLoading","errorMessage","setErrorMessage","handleScan","data","response","post","rollNo","alert","message","error","handleError","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","delay","onScan","onError","style","width","height","borderRadius","border","_c","$RefreshReg$"],"sources":["E:/Ticket booking/client/src/pages/QRScanner.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { QrReader } from \"react-qr-reader\";\r\nimport axios from \"axios\";\r\n\r\nconst QRScanner = () => {\r\n  const [result, setResult] = useState(null); // To store the result of the QR scan\r\n  const [loading, setLoading] = useState(false); // To show a loading state\r\n  const [errorMessage, setErrorMessage] = useState(\"\"); // To show error messages\r\n\r\n  // Handle successful scan\r\n  const handleScan = async (data) => {\r\n    if (data) {\r\n      setResult(data); // Update the result state with the scanned QR code\r\n      setLoading(true); // Show loading state while processing the result\r\n      try {\r\n        // Sending the scanned roll number to the backend API for validation\r\n        const response = await axios.post(\"http://localhost:5000/api/verify-ticket\", { rollNo: data });\r\n        setLoading(false); // Hide loading after the API call\r\n        alert(response.data.message); // Show alert with the API response message\r\n      } catch (error) {\r\n        setLoading(false); // Hide loading if there's an error\r\n        setErrorMessage(\"Invalid Ticket! Please try again.\"); // Show error message\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle error during scanning\r\n  const handleError = (err) => {\r\n    console.error(err); // Log error to the console\r\n    setErrorMessage(\"Error scanning QR code. Please check your camera.\"); // Display error message\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto mt-10 p-6 bg-white shadow-lg rounded-lg text-center\">\r\n      <h2 className=\"text-2xl font-bold text-blue-600 mb-4\">QR Code Scanner</h2>\r\n\r\n      {/* QR Reader Component */}\r\n      <div className=\"relative mb-4\">\r\n        <QrReader\r\n          delay={300} // The delay time for scanning (in ms)\r\n          onScan={handleScan} // Callback when QR code is successfully scanned\r\n          onError={handleError} // Callback when an error occurs while scanning\r\n          style={{ width: \"100%\", height: \"auto\", borderRadius: \"8px\", border: \"2px solid #ddd\" }} // Styling for QR reader\r\n        />\r\n\r\n        {/* Loading Overlay */}\r\n        {loading && (\r\n          <div className=\"absolute top-0 left-0 right-0 bottom-0 bg-black opacity-50 flex items-center justify-center text-white text-xl rounded-lg\">\r\n            Loading...\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Scanned Result Display */}\r\n      {result && (\r\n        <p className=\"mt-4 text-green-600 font-bold\">Scanned Roll No: {result}</p>\r\n      )}\r\n\r\n      {/* Error Message Display */}\r\n      {errorMessage && (\r\n        <p className=\"mt-4 text-red-600 font-bold\">{errorMessage}</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRScanner;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}