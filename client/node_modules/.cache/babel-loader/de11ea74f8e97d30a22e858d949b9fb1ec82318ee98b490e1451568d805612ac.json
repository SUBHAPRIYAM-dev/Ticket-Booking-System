{"ast":null,"code":"import axios from \"axios\";\n\n// Set baseURL dynamically for different environments (development or production)\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\"; // Use env variable for flexibility\n\nconst API = axios.create({\n  baseURL\n});\n\n// Add an interceptor to attach the Authorization token to every request (except login)\nAPI.interceptors.request.use(config => {\n  if (config.url !== \"/admin/login\") {\n    const token = localStorage.getItem(\"adminToken\"); // Get token from localStorage\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`; // Attach token if available\n    }\n  }\n  return config;\n}, error => {\n  console.error(\"‚ùå Request Interceptor Error:\", error.message);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token expiration (e.g., 401 Unauthorized)\nAPI.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Handle token expiry or unauthorized error\n    console.warn(\"‚ùå Token expired or invalid. Redirecting to login...\");\n    localStorage.removeItem(\"adminToken\"); // Remove token from localStorage\n    window.location.href = \"/admin/login\"; // Redirect to login page\n  }\n  return Promise.reject(error);\n});\n\n// ‚úÖ Login Admin - Ensures response structure is valid\nexport const loginAdmin = async data => {\n  try {\n    console.log(\"üîπ Sending login request with data:\", data);\n    const response = await API.post(\"/admin/login\", data);\n    console.log(\"‚úÖ Login API response:\", response);\n    if (!response.data || !response.data.token) {\n      throw new Error(\"Invalid response structure from server\");\n    }\n    localStorage.setItem(\"adminToken\", response.data.token); // Store token in localStorage\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"‚ùå Login error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n// ‚úÖ Get List of Students - Ensures correct API response\nexport const getStudents = async () => {\n  try {\n    const response = await API.get(\"/students\");\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"‚ùå Error fetching students:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// ‚úÖ Register a Student\nexport const registerStudent = async data => {\n  try {\n    const response = await API.post(\"/students/register\", data);\n\n    // Log the full response for debugging\n    console.log(\"Full response from server:\", response);\n\n    // Check if the response contains the 'message' key in 'data'\n    if (!response.data || !response.data.message) {\n      throw new Error(\"Invalid response structure from server.\");\n    }\n\n    // Handle success case\n    return response.data; // Return the data received from server (e.g., message and student)\n  } catch (error) {\n    var _error$response3;\n    console.error(\"‚ùå Error registering student:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error; // Throw error so it can be caught by the frontend form\n  }\n};\n\n// ‚úÖ Approve a Student\nexport const approveStudent = async id => {\n  try {\n    const response = await API.put(`/admin/approve/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"‚ùå Error approving student:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\n\n// ‚úÖ Reject a Student\nexport const rejectStudent = async id => {\n  try {\n    const response = await API.put(`/admin/reject/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error(\"‚ùå Error rejecting student:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\n\n// ‚úÖ Get Student by ID (useful for Admin Dashboard to get individual student details)\nexport const getStudentById = async id => {\n  try {\n    const response = await API.get(`/students/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    console.error(\"‚ùå Error fetching student by ID:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw error;\n  }\n};\n\n// ‚úÖ Retry logic (optional): Add retry functionality for failed requests, e.g., 502, 503 errors\nconst retryRequest = async (func, retries = 3, delay = 1000) => {\n  try {\n    return await func();\n  } catch (error) {\n    if (retries <= 0) throw error;\n    console.warn(`‚ùå Retrying request... Attempts left: ${retries}`);\n    await new Promise(resolve => setTimeout(resolve, delay));\n    return retryRequest(func, retries - 1, delay);\n  }\n};\n\n// Example: Using retry logic for a critical request (like fetching data)\nexport const fetchDataWithRetry = async () => {\n  return retryRequest(() => API.get(\"/some-critical-endpoint\"));\n};","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","API","create","interceptors","request","use","config","url","token","localStorage","getItem","headers","error","console","message","Promise","reject","response","status","warn","removeItem","window","location","href","loginAdmin","data","log","post","Error","setItem","_error$response","getStudents","get","_error$response2","registerStudent","_error$response3","approveStudent","id","put","_error$response4","rejectStudent","_error$response5","getStudentById","_error$response6","retryRequest","func","retries","delay","resolve","setTimeout","fetchDataWithRetry"],"sources":["E:/Ticket booking/client/src/services/api.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Set baseURL dynamically for different environments (development or production)\r\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\"; // Use env variable for flexibility\r\n\r\nconst API = axios.create({ baseURL });\r\n\r\n// Add an interceptor to attach the Authorization token to every request (except login)\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    if (config.url !== \"/admin/login\") {\r\n      const token = localStorage.getItem(\"adminToken\"); // Get token from localStorage\r\n      if (token) {\r\n        config.headers[\"Authorization\"] = `Bearer ${token}`; // Attach token if available\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error(\"‚ùå Request Interceptor Error:\", error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle token expiration (e.g., 401 Unauthorized)\r\nAPI.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Handle token expiry or unauthorized error\r\n      console.warn(\"‚ùå Token expired or invalid. Redirecting to login...\");\r\n      localStorage.removeItem(\"adminToken\"); // Remove token from localStorage\r\n      window.location.href = \"/admin/login\"; // Redirect to login page\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ‚úÖ Login Admin - Ensures response structure is valid\r\nexport const loginAdmin = async (data) => {\r\n  try {\r\n    console.log(\"üîπ Sending login request with data:\", data);\r\n    const response = await API.post(\"/admin/login\", data);\r\n\r\n    console.log(\"‚úÖ Login API response:\", response);\r\n\r\n    if (!response.data || !response.data.token) {\r\n      throw new Error(\"Invalid response structure from server\");\r\n    }\r\n\r\n    localStorage.setItem(\"adminToken\", response.data.token); // Store token in localStorage\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ‚úÖ Get List of Students - Ensures correct API response\r\nexport const getStudents = async () => {\r\n  try {\r\n    const response = await API.get(\"/students\");\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error fetching students:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ‚úÖ Register a Student\r\nexport const registerStudent = async (data) => {\r\n  try {\r\n    const response = await API.post(\"/students/register\", data);\r\n\r\n    // Log the full response for debugging\r\n    console.log(\"Full response from server:\", response);\r\n\r\n    // Check if the response contains the 'message' key in 'data'\r\n    if (!response.data || !response.data.message) {\r\n      throw new Error(\"Invalid response structure from server.\");\r\n    }\r\n\r\n    // Handle success case\r\n    return response.data; // Return the data received from server (e.g., message and student)\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error registering student:\", error.response?.data || error.message);\r\n    throw error; // Throw error so it can be caught by the frontend form\r\n  }\r\n};\r\n\r\n// ‚úÖ Approve a Student\r\nexport const approveStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/approve/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error approving student:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ‚úÖ Reject a Student\r\nexport const rejectStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/reject/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error rejecting student:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ‚úÖ Get Student by ID (useful for Admin Dashboard to get individual student details)\r\nexport const getStudentById = async (id) => {\r\n  try {\r\n    const response = await API.get(`/students/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error fetching student by ID:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ‚úÖ Retry logic (optional): Add retry functionality for failed requests, e.g., 502, 503 errors\r\nconst retryRequest = async (func, retries = 3, delay = 1000) => {\r\n  try {\r\n    return await func();\r\n  } catch (error) {\r\n    if (retries <= 0) throw error;\r\n    console.warn(`‚ùå Retrying request... Attempts left: ${retries}`);\r\n    await new Promise(resolve => setTimeout(resolve, delay));\r\n    return retryRequest(func, retries - 1, delay);\r\n  }\r\n};\r\n\r\n// Example: Using retry logic for a critical request (like fetching data)\r\nexport const fetchDataWithRetry = async () => {\r\n  return retryRequest(() => API.get(\"/some-critical-endpoint\"));\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}