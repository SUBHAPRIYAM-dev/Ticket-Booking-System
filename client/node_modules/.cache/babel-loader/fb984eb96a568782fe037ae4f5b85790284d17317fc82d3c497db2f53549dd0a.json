{"ast":null,"code":"var _jsxFileName = \"E:\\\\Ticket booking\\\\client\\\\src\\\\pages\\\\QRScanner.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { BrowserMultiFormatReader } from \"@zxing/browser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = () => {\n  _s();\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [scannedData, setScannedData] = useState(null);\n  const [isScanningEnabled, setIsScanningEnabled] = useState(true);\n  const [isFrontCamera, setIsFrontCamera] = useState(false);\n  const navigate = useNavigate();\n  const videoRef = useRef(null);\n  const codeReader = useRef(null);\n  const streamRef = useRef(null);\n  const startCamera = async facingMode => {\n    try {\n      var _cameras$, _cameras$2, _cameras$3;\n      stopCamera();\n      codeReader.current = new BrowserMultiFormatReader();\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const cameras = devices.filter(device => device.kind === \"videoinput\");\n      const cameraId = facingMode === \"user\" ? (_cameras$ = cameras[0]) === null || _cameras$ === void 0 ? void 0 : _cameras$.deviceId : ((_cameras$2 = cameras[1]) === null || _cameras$2 === void 0 ? void 0 : _cameras$2.deviceId) || ((_cameras$3 = cameras[0]) === null || _cameras$3 === void 0 ? void 0 : _cameras$3.deviceId);\n      if (!cameraId) {\n        setError(\"No camera found. Please connect a camera.\");\n        return;\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: cameraId\n        }\n      });\n      streamRef.current = stream;\n      codeReader.current.decodeFromStream(stream, videoRef.current, (result, err) => {\n        if (result && isScanningEnabled) {\n          handleScan(result.getText());\n        }\n        if (err && err.name !== \"NotFoundException\") {\n          setError(err.message || \"Unknown error while scanning.\");\n        }\n      });\n      setError(\"\");\n    } catch (err) {\n      console.error(\"Camera Access Error:\", err);\n      setError(err.name === \"NotAllowedError\" ? \"Camera access is blocked. Please allow camera permissions.\" : \"Unable to access camera. Please check your settings.\");\n    }\n  };\n  const stopCamera = () => {\n    if (codeReader.current) {\n      var _codeReader$current$s, _codeReader$current;\n      (_codeReader$current$s = (_codeReader$current = codeReader.current).stopContinuousDecode) === null || _codeReader$current$s === void 0 ? void 0 : _codeReader$current$s.call(_codeReader$current); // Stops continuous decoding if available\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n  };\n  const toggleCamera = () => {\n    setIsFrontCamera(prev => !prev);\n  };\n  useEffect(() => {\n    startCamera(isFrontCamera ? \"user\" : \"environment\");\n    return () => {\n      stopCamera();\n    };\n  }, [isFrontCamera]);\n  const handleScan = async data => {\n    try {\n      if (data && isScanningEnabled) {\n        console.log(\"Scanned QR Code:\", data);\n        setScannedData(data);\n        setIsScanningEnabled(false);\n        await checkTicket(data);\n      }\n    } catch (err) {\n      console.error(\"Error in handleScan:\", err);\n      setError(\"An unexpected error occurred while scanning.\");\n    }\n  };\n  const checkTicket = async rollNo => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/admin/verify-qrcode\", {\n        qrData: rollNo\n      });\n      if (!response.data || typeof response.data !== \"object\") {\n        throw new Error(\"Invalid response format from server.\");\n      }\n      if (response.data.success) {\n        setSuccess(\"Successfully scanned! The QR code is valid.\");\n      } else {\n        setError(response.data.message || \"Ticket verification failed.\");\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || \"Unknown error.\";\n      console.error(\"Error verifying ticket:\", errorMessage);\n      if (err.response) {\n        if (err.response.status === 404) {\n          setError(\"No student found for this QR code.\");\n        } else if (err.response.status === 400) {\n          setError(errorMessage);\n        } else {\n          setError(\"Server error. Please try again later.\");\n        }\n      } else if (err.request) {\n        setError(\"No response from server. Check network connection.\");\n      } else {\n        setError(\"Unknown error occurred. Please try again.\");\n      }\n    }\n  };\n  const resetScanner = () => {\n    setSuccess(\"\");\n    setError(\"\");\n    setScannedData(null);\n    setIsScanningEnabled(true);\n  };\n  const handleBack = () => {\n    navigate(\"/admin/dashboard\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 flex items-center justify-center py-12 px-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-md bg-white p-8 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-center text-gray-800 mb-6\",\n        children: \"QR Code Scanner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          muted: true,\n          width: \"100%\",\n          height: \"auto\",\n          style: {\n            borderRadius: \"8px\",\n            border: \"2px solid #ddd\",\n            maxHeight: \"400px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-center mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-500 text-center mb-4\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), success && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetScanner,\n        className: \"w-full py-3 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4\",\n        children: \"Next Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        className: \"w-full py-3 bg-gray-400 text-white font-semibold rounded-lg hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400 mb-4\",\n        children: \"Back to Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleCamera,\n        className: \"w-full py-3 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 mb-4\",\n        children: \"Switch Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(QRScanner, \"1V/4z8oog4VAyhDDUlKyD2T2OH0=\", false, function () {\n  return [useNavigate];\n});\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","axios","BrowserMultiFormatReader","jsxDEV","_jsxDEV","QRScanner","_s","error","setError","success","setSuccess","scannedData","setScannedData","isScanningEnabled","setIsScanningEnabled","isFrontCamera","setIsFrontCamera","navigate","videoRef","codeReader","streamRef","startCamera","facingMode","_cameras$","_cameras$2","_cameras$3","stopCamera","current","devices","navigator","mediaDevices","enumerateDevices","cameras","filter","device","kind","cameraId","deviceId","stream","getUserMedia","video","decodeFromStream","result","err","handleScan","getText","name","message","console","_codeReader$current$s","_codeReader$current","stopContinuousDecode","call","getTracks","forEach","track","stop","toggleCamera","prev","data","log","checkTicket","rollNo","response","post","qrData","Error","_err$response","_err$response$data","errorMessage","status","request","resetScanner","handleBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","muted","width","height","style","borderRadius","border","maxHeight","onClick","_c","$RefreshReg$"],"sources":["E:/Ticket booking/client/src/pages/QRScanner.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { BrowserMultiFormatReader } from \"@zxing/browser\";\r\n\r\nconst QRScanner = () => {\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [scannedData, setScannedData] = useState(null);\r\n  const [isScanningEnabled, setIsScanningEnabled] = useState(true);\r\n  const [isFrontCamera, setIsFrontCamera] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const videoRef = useRef(null);\r\n  const codeReader = useRef(null);\r\n  const streamRef = useRef(null);\r\n\r\n  const startCamera = async (facingMode) => {\r\n    try {\r\n      stopCamera();\r\n\r\n      codeReader.current = new BrowserMultiFormatReader();\r\n\r\n      const devices = await navigator.mediaDevices.enumerateDevices();\r\n      const cameras = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n      const cameraId =\r\n        facingMode === \"user\"\r\n          ? cameras[0]?.deviceId\r\n          : cameras[1]?.deviceId || cameras[0]?.deviceId;\r\n\r\n      if (!cameraId) {\r\n        setError(\"No camera found. Please connect a camera.\");\r\n        return;\r\n      }\r\n\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: { deviceId: cameraId },\r\n      });\r\n      streamRef.current = stream;\r\n\r\n      codeReader.current.decodeFromStream(stream, videoRef.current, (result, err) => {\r\n        if (result && isScanningEnabled) {\r\n          handleScan(result.getText());\r\n        }\r\n        if (err && err.name !== \"NotFoundException\") {\r\n          setError(err.message || \"Unknown error while scanning.\");\r\n        }\r\n      });\r\n\r\n      setError(\"\");\r\n    } catch (err) {\r\n      console.error(\"Camera Access Error:\", err);\r\n      setError(\r\n        err.name === \"NotAllowedError\"\r\n          ? \"Camera access is blocked. Please allow camera permissions.\"\r\n          : \"Unable to access camera. Please check your settings.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const stopCamera = () => {\r\n    if (codeReader.current) {\r\n      codeReader.current.stopContinuousDecode?.(); // Stops continuous decoding if available\r\n    }\r\n\r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach((track) => track.stop());\r\n      streamRef.current = null;\r\n    }\r\n  };\r\n\r\n\r\n  const toggleCamera = () => {\r\n    setIsFrontCamera((prev) => !prev);\r\n  };\r\n\r\n  useEffect(() => {\r\n    startCamera(isFrontCamera ? \"user\" : \"environment\");\r\n    return () => {\r\n      stopCamera();\r\n    };\r\n  }, [isFrontCamera]);\r\n\r\n  const handleScan = async (data) => {\r\n    try {\r\n      if (data && isScanningEnabled) {\r\n        console.log(\"Scanned QR Code:\", data);\r\n        setScannedData(data);\r\n        setIsScanningEnabled(false);\r\n        await checkTicket(data);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error in handleScan:\", err);\r\n      setError(\"An unexpected error occurred while scanning.\");\r\n    }\r\n  };\r\n\r\n  const checkTicket = async (rollNo) => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/admin/verify-qrcode\", { qrData: rollNo });\r\n\r\n      if (!response.data || typeof response.data !== \"object\") {\r\n        throw new Error(\"Invalid response format from server.\");\r\n      }\r\n\r\n      if (response.data.success) {\r\n        setSuccess(\"Successfully scanned! The QR code is valid.\");\r\n      } else {\r\n        setError(response.data.message || \"Ticket verification failed.\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || err.message || \"Unknown error.\";\r\n      console.error(\"Error verifying ticket:\", errorMessage);\r\n\r\n      if (err.response) {\r\n        if (err.response.status === 404) {\r\n          setError(\"No student found for this QR code.\");\r\n        } else if (err.response.status === 400) {\r\n          setError(errorMessage);\r\n        } else {\r\n          setError(\"Server error. Please try again later.\");\r\n        }\r\n      } else if (err.request) {\r\n        setError(\"No response from server. Check network connection.\");\r\n      } else {\r\n        setError(\"Unknown error occurred. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetScanner = () => {\r\n    setSuccess(\"\");\r\n    setError(\"\");\r\n    setScannedData(null);\r\n    setIsScanningEnabled(true);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate(\"/admin/dashboard\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center py-12 px-6\">\r\n      <div className=\"w-full max-w-md bg-white p-8 rounded-lg shadow-lg\">\r\n        <h2 className=\"text-2xl font-semibold text-center text-gray-800 mb-6\">\r\n          QR Code Scanner\r\n        </h2>\r\n\r\n        <div className=\"relative mb-4\">\r\n          <video\r\n            ref={videoRef}\r\n            autoPlay\r\n            muted\r\n            width=\"100%\"\r\n            height=\"auto\"\r\n            style={{\r\n              borderRadius: \"8px\",\r\n              border: \"2px solid #ddd\",\r\n              maxHeight: \"400px\",\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}\r\n        {success && <p className=\"text-green-500 text-center mb-4\">{success}</p>}\r\n\r\n        {success && (\r\n          <button\r\n            onClick={resetScanner}\r\n            className=\"w-full py-3 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4\"\r\n          >\r\n            Next Scan\r\n          </button>\r\n        )}\r\n\r\n        <button\r\n          onClick={handleBack}\r\n          className=\"w-full py-3 bg-gray-400 text-white font-semibold rounded-lg hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400 mb-4\"\r\n        >\r\n          Back to Dashboard\r\n        </button>\r\n\r\n        <button\r\n          onClick={toggleCamera}\r\n          className=\"w-full py-3 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 mb-4\"\r\n        >\r\n          Switch Camera\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRScanner;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}