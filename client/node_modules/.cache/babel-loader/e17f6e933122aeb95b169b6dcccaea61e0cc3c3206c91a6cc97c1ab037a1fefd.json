{"ast":null,"code":"import axios from \"axios\";\n\n// ✅ Create an axios instance with the base URL for API\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\"\n});\n\n// ✅ Attach Authorization Token to Every Request (Except Login)\nAPI.interceptors.request.use(config => {\n  if (config.url !== \"/admin/login\") {\n    const token = localStorage.getItem(\"adminToken\");\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    } else {\n      console.warn(\"⚠️ No admin token found! API request may fail.\");\n    }\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ✅ Admin Login\nexport const loginAdmin = async data => {\n  try {\n    console.log(\"🔹 Sending login request with data:\", data);\n    const response = await API.post(\"/admin/login\", data);\n    console.log(\"✅ Login API response:\", response.data);\n    if (!response.data || !response.data.token) {\n      throw new Error(\"Invalid response structure from server\");\n    }\n    localStorage.setItem(\"adminToken\", response.data.token);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"❌ Login error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n// ✅ Fetch Students for Admin (Fixing ID Card URL Issue)\nexport const getStudents = async () => {\n  try {\n    console.log(\"🔹 Fetching students for admin...\");\n    const token = localStorage.getItem(\"adminToken\");\n    if (!token) {\n      throw new Error(\"Admin not authenticated. Please log in.\");\n    }\n    const response = await API.get(\"/admin/students\");\n    console.log(\"✅ Students API response:\", response.data);\n    if (!Array.isArray(response.data)) {\n      throw new Error(\"Invalid response format: Expected an array\");\n    }\n\n    // ✅ Ensure studentIdCard URLs are correctly formatted\n    const baseURL = \"http://localhost:5000\";\n    const studentsWithFullImageURL = response.data.map(student => ({\n      ...student,\n      studentIdCard: student.studentIdCard ? `${baseURL}/${student.studentIdCard.replace(/\\\\/g, \"/\")}` // ✅ Fix `\\` to `/`\n      : null\n    }));\n    return studentsWithFullImageURL;\n  } catch (error) {\n    var _error$response2, _error$response3;\n    console.error(\"❌ Error fetching students:\", (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status, ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\n\n// ✅ Register a Student (Ensures multipart/form-data handling)\nexport const registerStudent = async data => {\n  try {\n    console.log(\"🔹 Sending registration request with data:\", data);\n\n    // Ensure you have the correct endpoint and it's not missing from the server-side.\n    const response = await API.post(\"/students/register\", data, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\" // This ensures the form data is correctly processed.\n      }\n    });\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    console.log(\"✅ Register student API response:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"❌ Error registering student:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\n\n// ✅ Approve a Student\nexport const approveStudent = async id => {\n  try {\n    const response = await API.put(`/admin/approve/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error(\"❌ Error approving student:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\n\n// ✅ Reject a Student\nexport const rejectStudent = async id => {\n  try {\n    const response = await API.put(`/admin/reject/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    console.error(\"❌ Error rejecting student:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw error;\n  }\n};\n\n// ✅ Verify QR Code\nexport const verifyQRCode = async (qrData, rollNo) => {\n  try {\n    const response = await API.post(\"/verify-qrcode\", {\n      qrData,\n      rollNo\n    });\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    console.error(\"❌ Error verifying QR code:\", ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","url","token","localStorage","getItem","headers","console","warn","error","Promise","reject","loginAdmin","data","log","response","post","Error","setItem","_error$response","message","getStudents","get","Array","isArray","studentsWithFullImageURL","map","student","studentIdCard","replace","_error$response2","_error$response3","status","registerStudent","_error$response4","approveStudent","id","put","_error$response5","rejectStudent","_error$response6","verifyQRCode","qrData","rollNo","_error$response7"],"sources":["E:/Ticket booking/client/src/services/api.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// ✅ Create an axios instance with the base URL for API\r\nconst API = axios.create({ baseURL: \"http://localhost:5000/api\" });\r\n\r\n// ✅ Attach Authorization Token to Every Request (Except Login)\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    if (config.url !== \"/admin/login\") {\r\n      const token = localStorage.getItem(\"adminToken\");\r\n      if (token) {\r\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n      } else {\r\n        console.warn(\"⚠️ No admin token found! API request may fail.\");\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ✅ Admin Login\r\nexport const loginAdmin = async (data) => {\r\n  try {\r\n    console.log(\"🔹 Sending login request with data:\", data);\r\n    const response = await API.post(\"/admin/login\", data);\r\n    console.log(\"✅ Login API response:\", response.data);\r\n\r\n    if (!response.data || !response.data.token) {\r\n      throw new Error(\"Invalid response structure from server\");\r\n    }\r\n\r\n    localStorage.setItem(\"adminToken\", response.data.token);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Fetch Students for Admin (Fixing ID Card URL Issue)\r\nexport const getStudents = async () => {\r\n  try {\r\n    console.log(\"🔹 Fetching students for admin...\");\r\n\r\n    const token = localStorage.getItem(\"adminToken\");\r\n    if (!token) {\r\n      throw new Error(\"Admin not authenticated. Please log in.\");\r\n    }\r\n\r\n    const response = await API.get(\"/admin/students\");\r\n    console.log(\"✅ Students API response:\", response.data);\r\n\r\n    if (!Array.isArray(response.data)) {\r\n      throw new Error(\"Invalid response format: Expected an array\");\r\n    }\r\n\r\n    // ✅ Ensure studentIdCard URLs are correctly formatted\r\n    const baseURL = \"http://localhost:5000\";\r\n    const studentsWithFullImageURL = response.data.map((student) => ({\r\n      ...student,\r\n      studentIdCard: student.studentIdCard\r\n        ? `${baseURL}/${student.studentIdCard.replace(/\\\\/g, \"/\")}` // ✅ Fix `\\` to `/`\r\n        : null,\r\n    }));\r\n\r\n    return studentsWithFullImageURL;\r\n  } catch (error) {\r\n    console.error(\r\n      \"❌ Error fetching students:\",\r\n      error.response?.status,\r\n      error.response?.data || error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Register a Student (Ensures multipart/form-data handling)\r\nexport const registerStudent = async (data) => {\r\n  try {\r\n    console.log(\"🔹 Sending registration request with data:\", data);\r\n\r\n    // Ensure you have the correct endpoint and it's not missing from the server-side.\r\n    const response = await API.post(\"/students/register\", data, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\", // This ensures the form data is correctly processed.\r\n      },\r\n    });\r\n\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n\r\n    console.log(\"✅ Register student API response:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ Error registering student:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Approve a Student\r\nexport const approveStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/approve/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ Error approving student:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Reject a Student\r\nexport const rejectStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/reject/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ Error rejecting student:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Verify QR Code\r\nexport const verifyQRCode = async (qrData, rollNo) => {\r\n  try {\r\n    const response = await API.post(\"/verify-qrcode\", { qrData, rollNo });\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ Error verifying QR code:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}