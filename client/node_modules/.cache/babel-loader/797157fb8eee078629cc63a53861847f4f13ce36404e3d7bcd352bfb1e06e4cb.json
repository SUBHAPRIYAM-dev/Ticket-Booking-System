{"ast":null,"code":"var _jsxFileName = \"E:\\\\Ticket booking\\\\client\\\\src\\\\components\\\\ProtectedRoute.jsx\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\"; // To decode JWT token and check expiry time\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = () => {\n  const token = localStorage.getItem(\"adminToken\");\n\n  // Check if there's a token and if it's not expired\n  const isAuthenticated = token && !isTokenExpired(token);\n\n  // If the token is expired or doesn't exist, redirect to login\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 28\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/admin/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 41\n  }, this);\n};\n\n// Function to check if the token is expired\n_c = ProtectedRoute;\nconst isTokenExpired = token => {\n  try {\n    const decoded = jwt_decode(token);\n    const currentTime = Date.now() / 1000; // Current time in seconds\n    return decoded.exp < currentTime; // If the token is expired\n  } catch (error) {\n    return true; // If decoding fails, assume the token is invalid\n  }\n};\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","Outlet","jwt_decode","jsxDEV","_jsxDEV","ProtectedRoute","token","localStorage","getItem","isAuthenticated","isTokenExpired","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","decoded","currentTime","Date","now","exp","error","$RefreshReg$"],"sources":["E:/Ticket booking/client/src/components/ProtectedRoute.jsx"],"sourcesContent":["import { Navigate, Outlet } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\"; // To decode JWT token and check expiry time\r\n\r\nconst ProtectedRoute = () => {\r\n  const token = localStorage.getItem(\"adminToken\");\r\n\r\n  // Check if there's a token and if it's not expired\r\n  const isAuthenticated = token && !isTokenExpired(token);\r\n\r\n  // If the token is expired or doesn't exist, redirect to login\r\n  return isAuthenticated ? <Outlet /> : <Navigate to=\"/admin/login\" replace />;\r\n};\r\n\r\n// Function to check if the token is expired\r\nconst isTokenExpired = (token) => {\r\n  try {\r\n    const decoded = jwt_decode(token);\r\n    const currentTime = Date.now() / 1000; // Current time in seconds\r\n    return decoded.exp < currentTime; // If the token is expired\r\n  } catch (error) {\r\n    return true; // If decoding fails, assume the token is invalid\r\n  }\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,OAAOC,UAAU,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;;EAEhD;EACA,MAAMC,eAAe,GAAGH,KAAK,IAAI,CAACI,cAAc,CAACJ,KAAK,CAAC;;EAEvD;EACA,OAAOG,eAAe,gBAAGL,OAAA,CAACH,MAAM;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGV,OAAA,CAACJ,QAAQ;IAACe,EAAE,EAAC,cAAc;IAACC,OAAO;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9E,CAAC;;AAED;AAAAG,EAAA,GAVMZ,cAAc;AAWpB,MAAMK,cAAc,GAAIJ,KAAK,IAAK;EAChC,IAAI;IACF,MAAMY,OAAO,GAAGhB,UAAU,CAACI,KAAK,CAAC;IACjC,MAAMa,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,OAAOH,OAAO,CAACI,GAAG,GAAGH,WAAW,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;AAED,eAAelB,cAAc;AAAC,IAAAY,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}