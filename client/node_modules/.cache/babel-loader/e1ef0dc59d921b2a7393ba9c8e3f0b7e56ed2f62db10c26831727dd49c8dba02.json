{"ast":null,"code":"var _jsxFileName = \"E:\\\\Ticket booking\\\\client\\\\src\\\\pages\\\\QRScanner.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { QrReader } from \"react-qr-reader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = () => {\n  _s();\n  const [scannedData, setScannedData] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [cameraAccess, setCameraAccess] = useState(false); // Camera access state\n  const [isFrontCamera, setIsFrontCamera] = useState(true); // Front or back camera state\n  const videoRef = useRef(null); // Reference to the video element\n\n  // Handle QR code scan result\n  const handleScan = data => {\n    if (data) {\n      console.log(\"Scanned QR Code Data: \", data); // Log the scanned QR code data\n      setScannedData(data); // Update the state with the scanned data\n      setError(\"\"); // Clear previous error messages\n    } else {\n      console.log(\"No QR code detected or scan result is empty.\");\n    }\n  };\n\n  // Handle error during scanning\n  const handleError = err => {\n    console.error(\"QR Reader Error: \", err); // Log the error\n    setError(\"An error occurred while scanning. Please try again.\");\n  };\n\n  // Start the camera stream with constraints (front or back camera)\n  const startCamera = facingMode => {\n    const constraints = {\n      video: {\n        facingMode: facingMode,\n        // Choose between 'user' (front) and 'environment' (back)\n        width: {\n          ideal: 1280\n        },\n        height: {\n          ideal: 720\n        }\n      }\n    };\n\n    // Access the user's camera\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream; // Set the video stream to the video element\n      }\n      setCameraAccess(true); // Camera is accessible\n      console.log(\"Camera access granted\");\n    }).catch(err => {\n      console.error(\"Error accessing camera: \", err);\n      setCameraAccess(false); // Camera access failed\n      setError(\"Unable to access the camera. Please check your permissions.\");\n    });\n  };\n\n  // Switch the camera between front and back\n  const toggleCamera = () => {\n    const newCamera = isFrontCamera ? \"environment\" : \"user\"; // Toggle between front and back camera\n    setIsFrontCamera(!isFrontCamera); // Update camera state\n    startCamera(newCamera); // Restart camera with new facingMode\n  };\n\n  // Initialize the camera on mount and clean up on unmount\n  useEffect(() => {\n    startCamera(isFrontCamera ? \"user\" : \"environment\"); // Start the camera with the default facingMode (front)\n    return () => {\n      // Clean up camera stream when component unmounts\n      if (videoRef.current && videoRef.current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        const tracks = stream.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    };\n  }, [isFrontCamera]); // Re-run effect when camera mode changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 flex items-center justify-center py-12 px-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-md bg-white p-6 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-center text-gray-800 mb-4\",\n        children: \"QR Code Scanner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), !cameraAccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-red-500 text-center mb-4\",\n        children: error || \"Camera access is denied or unavailable.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), cameraAccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          muted: true,\n          width: \"100%\",\n          height: \"auto\",\n          style: {\n            borderRadius: \"8px\",\n            border: \"2px solid #ddd\",\n            maxHeight: \"400px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QrReader, {\n        delay: 500,\n        onError: handleError // Error handling callback\n        ,\n        onResult: handleScan // Result handling callback\n        ,\n        style: {\n          width: \"100%\",\n          height: \"auto\",\n          borderRadius: \"8px\",\n          border: \"2px solid #ddd\",\n          display: \"none\" // Hide QR reader interface as we're using a video element\n        },\n        facingMode: isFrontCamera ? \"user\" : \"environment\" // Toggle between front and back camera\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), scannedData && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-500 text-center mb-4\",\n        children: [\"Successfully scanned: \", scannedData]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleCamera,\n        className: \"w-full py-3 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 mb-4\",\n        children: \"Switch Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(QRScanner, \"vCuYyYHtWEjzV0UwBsxTRRT6MF8=\");\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["React","useState","useEffect","useRef","QrReader","jsxDEV","_jsxDEV","QRScanner","_s","scannedData","setScannedData","error","setError","cameraAccess","setCameraAccess","isFrontCamera","setIsFrontCamera","videoRef","handleScan","data","console","log","handleError","err","startCamera","facingMode","constraints","video","width","ideal","height","navigator","mediaDevices","getUserMedia","then","stream","current","srcObject","catch","toggleCamera","newCamera","tracks","getTracks","forEach","track","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","muted","style","borderRadius","border","maxHeight","delay","onError","onResult","display","onClick","_c","$RefreshReg$"],"sources":["E:/Ticket booking/client/src/pages/QRScanner.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { QrReader } from \"react-qr-reader\";\r\n\r\nconst QRScanner = () => {\r\n  const [scannedData, setScannedData] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [cameraAccess, setCameraAccess] = useState(false); // Camera access state\r\n  const [isFrontCamera, setIsFrontCamera] = useState(true); // Front or back camera state\r\n  const videoRef = useRef(null); // Reference to the video element\r\n\r\n  // Handle QR code scan result\r\n  const handleScan = (data) => {\r\n    if (data) {\r\n      console.log(\"Scanned QR Code Data: \", data); // Log the scanned QR code data\r\n      setScannedData(data); // Update the state with the scanned data\r\n      setError(\"\"); // Clear previous error messages\r\n    } else {\r\n      console.log(\"No QR code detected or scan result is empty.\");\r\n    }\r\n  };\r\n\r\n  // Handle error during scanning\r\n  const handleError = (err) => {\r\n    console.error(\"QR Reader Error: \", err); // Log the error\r\n    setError(\"An error occurred while scanning. Please try again.\");\r\n  };\r\n\r\n  // Start the camera stream with constraints (front or back camera)\r\n  const startCamera = (facingMode) => {\r\n    const constraints = {\r\n      video: {\r\n        facingMode: facingMode, // Choose between 'user' (front) and 'environment' (back)\r\n        width: { ideal: 1280 },\r\n        height: { ideal: 720 },\r\n      },\r\n    };\r\n\r\n    // Access the user's camera\r\n    navigator.mediaDevices\r\n      .getUserMedia(constraints)\r\n      .then((stream) => {\r\n        if (videoRef.current) {\r\n          videoRef.current.srcObject = stream; // Set the video stream to the video element\r\n        }\r\n        setCameraAccess(true); // Camera is accessible\r\n        console.log(\"Camera access granted\");\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error accessing camera: \", err);\r\n        setCameraAccess(false); // Camera access failed\r\n        setError(\"Unable to access the camera. Please check your permissions.\");\r\n      });\r\n  };\r\n\r\n  // Switch the camera between front and back\r\n  const toggleCamera = () => {\r\n    const newCamera = isFrontCamera ? \"environment\" : \"user\"; // Toggle between front and back camera\r\n    setIsFrontCamera(!isFrontCamera); // Update camera state\r\n    startCamera(newCamera); // Restart camera with new facingMode\r\n  };\r\n\r\n  // Initialize the camera on mount and clean up on unmount\r\n  useEffect(() => {\r\n    startCamera(isFrontCamera ? \"user\" : \"environment\"); // Start the camera with the default facingMode (front)\r\n    return () => {\r\n      // Clean up camera stream when component unmounts\r\n      if (videoRef.current && videoRef.current.srcObject) {\r\n        const stream = videoRef.current.srcObject;\r\n        const tracks = stream.getTracks();\r\n        tracks.forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, [isFrontCamera]); // Re-run effect when camera mode changes\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center py-12 px-6\">\r\n      <div className=\"w-full max-w-md bg-white p-6 rounded-lg shadow-lg\">\r\n        <h2 className=\"text-2xl font-semibold text-center text-gray-800 mb-4\">\r\n          QR Code Scanner\r\n        </h2>\r\n\r\n        {/* Error Handling for Camera Access */}\r\n        {!cameraAccess && (\r\n          <div className=\"text-red-500 text-center mb-4\">\r\n            {error || \"Camera access is denied or unavailable.\"}\r\n          </div>\r\n        )}\r\n\r\n        {/* Camera Feed (Video Element) */}\r\n        {cameraAccess && (\r\n          <div className=\"relative mb-4\">\r\n            <video\r\n              ref={videoRef}\r\n              autoPlay\r\n              muted\r\n              width=\"100%\"\r\n              height=\"auto\"\r\n              style={{\r\n                borderRadius: \"8px\",\r\n                border: \"2px solid #ddd\",\r\n                maxHeight: \"400px\",\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* QR Code Scanner */}\r\n        <QrReader\r\n          delay={500}\r\n          onError={handleError} // Error handling callback\r\n          onResult={handleScan} // Result handling callback\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"auto\",\r\n            borderRadius: \"8px\",\r\n            border: \"2px solid #ddd\",\r\n            display: \"none\", // Hide QR reader interface as we're using a video element\r\n          }}\r\n          facingMode={isFrontCamera ? \"user\" : \"environment\"} // Toggle between front and back camera\r\n        />\r\n\r\n        {/* Display Scanned Data */}\r\n        {scannedData && (\r\n          <p className=\"text-green-500 text-center mb-4\">\r\n            Successfully scanned: {scannedData}\r\n          </p>\r\n        )}\r\n\r\n        {/* Buttons */}\r\n        <button\r\n          onClick={toggleCamera}\r\n          className=\"w-full py-3 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 mb-4\"\r\n        >\r\n          Switch Camera\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRScanner;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}