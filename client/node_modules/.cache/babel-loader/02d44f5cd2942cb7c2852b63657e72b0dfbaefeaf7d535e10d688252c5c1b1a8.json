{"ast":null,"code":"import axios from \"axios\";\n\n// Set baseURL dynamically for different environments (development or production)\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create axios instance\nconst API = axios.create({\n  baseURL\n});\n\n// Centralized error handler\nconst handleApiError = error => {\n  var _error$response;\n  console.error(\"API Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message || error);\n  return Promise.reject(error); // Make sure to propagate the error\n};\n\n// Request interceptor for attaching Authorization token\nAPI.interceptors.request.use(config => {\n  // Skip adding token to login request\n  if (config.url !== \"/admin/login\") {\n    const token = getAuthToken(); // Get token from localStorage with expiry check\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n  }\n  return config;\n}, handleApiError);\n\n// Response interceptor to handle expired token\nAPI.interceptors.response.use(response => response, error => {\n  var _error$response2, _error$response3, _error$response3$data;\n  const status = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status;\n  if (status === 401 || ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) === \"Token expired\") {\n    console.warn(\"❌ Token expired or invalid. Redirecting to login...\");\n    localStorage.removeItem(\"adminToken\");\n    window.location.href = \"/admin/login\"; // Redirect to login page\n  }\n  return Promise.reject(error);\n});\n\n// ✅ Example API Call: Login\nexport const loginAdmin = async data => {\n  try {\n    const response = await API.post(\"/admin/login\", data);\n    if (!response.data || !response.data.token) {\n      throw new Error(\"Invalid response structure from server\");\n    }\n    setAuthToken(response.data.token); // Store token with expiry\n    return response.data;\n  } catch (error) {\n    handleApiError(error); // Use centralized error handler\n    throw error;\n  }\n};\n\n// ✅ Get List of Students\nexport const getStudents = async () => {\n  try {\n    const response = await API.get(\"/students\");\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// ✅ Register a Student\nexport const registerStudent = async data => {\n  try {\n    const response = await API.post(\"/students/register\", data);\n    if (!response.data || !response.data.message) {\n      throw new Error(\"Invalid response structure from server.\");\n    }\n    return response.data; // Return the response data from the server\n  } catch (error) {\n    handleApiError(error); // Centralized error handler\n    throw error;\n  }\n};\n\n// ✅ Approve a Student\nexport const approveStudent = async id => {\n  try {\n    const response = await API.put(`/admin/approve/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// ✅ Reject a Student\nexport const rejectStudent = async id => {\n  try {\n    const response = await API.put(`/admin/reject/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// ✅ Get Student by ID\nexport const getStudentById = async id => {\n  try {\n    const response = await API.get(`/students/${id}`);\n    if (!response.data) throw new Error(\"Invalid response from server\");\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Retry Logic: Retry failed requests for specific error codes\nconst retryRequest = async (func, retries = 3, delay = 1000, errorCodes = [502, 503]) => {\n  try {\n    return await func();\n  } catch (error) {\n    var _error$response4;\n    if (retries <= 0 || !errorCodes.includes((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status)) {\n      throw error;\n    }\n    console.warn(`❌ Retrying request... Attempts left: ${retries}`);\n    await new Promise(resolve => setTimeout(resolve, delay)); // Delay before retrying\n    return retryRequest(func, retries - 1, delay, errorCodes);\n  }\n};\n\n// Example: Using retry logic for a critical request\nexport const fetchDataWithRetry = async () => {\n  return retryRequest(() => API.get(\"/some-critical-endpoint\"));\n};\n\n// Utility: Get Auth Token from localStorage with Expiry Check\nconst getAuthToken = () => {\n  const storedToken = JSON.parse(localStorage.getItem(\"adminToken\"));\n  if (!storedToken || new Date().getTime() > storedToken.expiryTime) {\n    localStorage.removeItem(\"adminToken\");\n    return null;\n  }\n  return storedToken.token;\n};\n\n// Utility: Set Auth Token with Expiry Time (1 hour expiry)\nconst setAuthToken = token => {\n  const expiryTime = new Date().getTime() + 60 * 60 * 1000; // 1 hour expiry\n  localStorage.setItem(\"adminToken\", JSON.stringify({\n    token,\n    expiryTime\n  }));\n};\nexport { setAuthToken, getAuthToken };","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","API","create","handleApiError","error","_error$response","console","response","data","message","Promise","reject","interceptors","request","use","config","url","token","getAuthToken","headers","_error$response2","_error$response3","_error$response3$data","status","warn","localStorage","removeItem","window","location","href","loginAdmin","post","Error","setAuthToken","getStudents","get","registerStudent","approveStudent","id","put","rejectStudent","getStudentById","retryRequest","func","retries","delay","errorCodes","_error$response4","includes","resolve","setTimeout","fetchDataWithRetry","storedToken","JSON","parse","getItem","Date","getTime","expiryTime","setItem","stringify"],"sources":["E:/Ticket booking/client/src/services/api.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Set baseURL dynamically for different environments (development or production)\r\nconst baseURL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Create axios instance\r\nconst API = axios.create({ baseURL });\r\n\r\n// Centralized error handler\r\nconst handleApiError = (error) => {\r\n  console.error(\"API Error:\", error.response?.data || error.message || error);\r\n  return Promise.reject(error);  // Make sure to propagate the error\r\n};\r\n\r\n// Request interceptor for attaching Authorization token\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    // Skip adding token to login request\r\n    if (config.url !== \"/admin/login\") {\r\n      const token = getAuthToken();  // Get token from localStorage with expiry check\r\n      if (token) {\r\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  handleApiError\r\n);\r\n\r\n// Response interceptor to handle expired token\r\nAPI.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    const status = error.response?.status;\r\n    if (status === 401 || error.response?.data?.message === \"Token expired\") {\r\n      console.warn(\"❌ Token expired or invalid. Redirecting to login...\");\r\n      localStorage.removeItem(\"adminToken\");\r\n      window.location.href = \"/admin/login\";  // Redirect to login page\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ✅ Example API Call: Login\r\nexport const loginAdmin = async (data) => {\r\n  try {\r\n    const response = await API.post(\"/admin/login\", data);\r\n    if (!response.data || !response.data.token) {\r\n      throw new Error(\"Invalid response structure from server\");\r\n    }\r\n    setAuthToken(response.data.token); // Store token with expiry\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error);  // Use centralized error handler\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Get List of Students\r\nexport const getStudents = async () => {\r\n  try {\r\n    const response = await API.get(\"/students\");\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Register a Student\r\nexport const registerStudent = async (data) => {\r\n  try {\r\n    const response = await API.post(\"/students/register\", data);\r\n    if (!response.data || !response.data.message) {\r\n      throw new Error(\"Invalid response structure from server.\");\r\n    }\r\n    return response.data; // Return the response data from the server\r\n  } catch (error) {\r\n    handleApiError(error); // Centralized error handler\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Approve a Student\r\nexport const approveStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/approve/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Reject a Student\r\nexport const rejectStudent = async (id) => {\r\n  try {\r\n    const response = await API.put(`/admin/reject/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Get Student by ID\r\nexport const getStudentById = async (id) => {\r\n  try {\r\n    const response = await API.get(`/students/${id}`);\r\n    if (!response.data) throw new Error(\"Invalid response from server\");\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Retry Logic: Retry failed requests for specific error codes\r\nconst retryRequest = async (func, retries = 3, delay = 1000, errorCodes = [502, 503]) => {\r\n  try {\r\n    return await func();\r\n  } catch (error) {\r\n    if (retries <= 0 || !errorCodes.includes(error.response?.status)) {\r\n      throw error;\r\n    }\r\n    console.warn(`❌ Retrying request... Attempts left: ${retries}`);\r\n    await new Promise((resolve) => setTimeout(resolve, delay)); // Delay before retrying\r\n    return retryRequest(func, retries - 1, delay, errorCodes);\r\n  }\r\n};\r\n\r\n// Example: Using retry logic for a critical request\r\nexport const fetchDataWithRetry = async () => {\r\n  return retryRequest(() => API.get(\"/some-critical-endpoint\"));\r\n};\r\n\r\n// Utility: Get Auth Token from localStorage with Expiry Check\r\nconst getAuthToken = () => {\r\n  const storedToken = JSON.parse(localStorage.getItem(\"adminToken\"));\r\n  if (!storedToken || new Date().getTime() > storedToken.expiryTime) {\r\n    localStorage.removeItem(\"adminToken\");\r\n    return null;\r\n  }\r\n  return storedToken.token;\r\n};\r\n\r\n// Utility: Set Auth Token with Expiry Time (1 hour expiry)\r\nconst setAuthToken = (token) => {\r\n  const expiryTime = new Date().getTime() + 60 * 60 * 1000; // 1 hour expiry\r\n  localStorage.setItem(\"adminToken\", JSON.stringify({ token, expiryTime }));\r\n};\r\n\r\nexport { setAuthToken, getAuthToken };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}