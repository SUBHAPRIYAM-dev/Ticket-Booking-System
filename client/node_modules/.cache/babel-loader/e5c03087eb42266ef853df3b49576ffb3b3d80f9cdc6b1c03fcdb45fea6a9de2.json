{"ast":null,"code":"var _jsxFileName = \"E:\\\\Ticket booking\\\\client\\\\src\\\\pages\\\\QRScanner.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { QrReader } from 'react-qr-reader';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = () => {\n  _s();\n  const [message, setMessage] = useState(null);\n  const [scannedRollNumbers, setScannedRollNumbers] = useState(new Set()); // Track scanned QR codes\n\n  const handleScan = async data => {\n    if (data) {\n      const rollNo = data.text; // Extract roll number from QR code\n\n      if (scannedRollNumbers.has(rollNo)) {\n        setMessage({\n          type: \"error\",\n          text: \"This QR Code has already been scanned!\"\n        });\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/admin/verify\", {\n          rollNo\n        });\n        setMessage({\n          type: \"success\",\n          text: response.data.message\n        });\n\n        // Add the roll number to prevent duplicate scans\n        setScannedRollNumbers(prev => new Set(prev.add(rollNo)));\n      } catch (error) {\n        var _error$response, _error$response$data;\n        setMessage({\n          type: \"error\",\n          text: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error verifying QR code!\"\n        });\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(\"QR Scanner Error:\", err);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-lg mx-auto p-6 bg-white shadow-lg mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-blue-600 mb-4\",\n      children: \"QR Code Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `p-3 text-white ${message.type === \"error\" ? \"bg-red-500\" : \"bg-green-500\"}`,\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(QrScanner, {\n      delay: 300,\n      onError: handleError,\n      onScan: handleScan,\n      style: {\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(QRScanner, \"8BxkVDcTjLNjhJiM8Wonl/OSrPQ=\");\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["useState","QrReader","axios","jsxDEV","_jsxDEV","QRScanner","_s","message","setMessage","scannedRollNumbers","setScannedRollNumbers","Set","handleScan","data","rollNo","text","has","type","response","post","prev","add","error","_error$response","_error$response$data","handleError","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","QrScanner","delay","onError","onScan","style","width","_c","$RefreshReg$"],"sources":["E:/Ticket booking/client/src/pages/QRScanner.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { QrReader } from 'react-qr-reader';\r\n\r\nimport axios from \"axios\";\r\n\r\nconst QRScanner = () => {\r\n  const [message, setMessage] = useState(null);\r\n  const [scannedRollNumbers, setScannedRollNumbers] = useState(new Set()); // Track scanned QR codes\r\n\r\n  const handleScan = async (data) => {\r\n    if (data) {\r\n      const rollNo = data.text; // Extract roll number from QR code\r\n\r\n      if (scannedRollNumbers.has(rollNo)) {\r\n        setMessage({ type: \"error\", text: \"This QR Code has already been scanned!\" });\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/admin/verify\", { rollNo });\r\n        setMessage({ type: \"success\", text: response.data.message });\r\n\r\n        // Add the roll number to prevent duplicate scans\r\n        setScannedRollNumbers((prev) => new Set(prev.add(rollNo)));\r\n      } catch (error) {\r\n        setMessage({\r\n          type: \"error\",\r\n          text: error.response?.data?.message || \"Error verifying QR code!\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleError = (err) => {\r\n    console.error(\"QR Scanner Error:\", err);\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-lg mx-auto p-6 bg-white shadow-lg mt-10\">\r\n      <h2 className=\"text-2xl font-bold text-blue-600 mb-4\">QR Code Scanner</h2>\r\n\r\n      {message && (\r\n        <p className={`p-3 text-white ${message.type === \"error\" ? \"bg-red-500\" : \"bg-green-500\"}`}>\r\n          {message.text}\r\n        </p>\r\n      )}\r\n\r\n      <QrScanner delay={300} onError={handleError} onScan={handleScan} style={{ width: \"100%\" }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRScanner;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,iBAAiB;AAE1C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGV,QAAQ,CAAC,IAAIW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEzE,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;IACjC,IAAIA,IAAI,EAAE;MACR,MAAMC,MAAM,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC;;MAE1B,IAAIN,kBAAkB,CAACO,GAAG,CAACF,MAAM,CAAC,EAAE;QAClCN,UAAU,CAAC;UAAES,IAAI,EAAE,OAAO;UAAEF,IAAI,EAAE;QAAyC,CAAC,CAAC;QAC7E;MACF;MAEA,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,wCAAwC,EAAE;UAAEL;QAAO,CAAC,CAAC;QACvFN,UAAU,CAAC;UAAES,IAAI,EAAE,SAAS;UAAEF,IAAI,EAAEG,QAAQ,CAACL,IAAI,CAACN;QAAQ,CAAC,CAAC;;QAE5D;QACAG,qBAAqB,CAAEU,IAAI,IAAK,IAAIT,GAAG,CAACS,IAAI,CAACC,GAAG,CAACP,MAAM,CAAC,CAAC,CAAC;MAC5D,CAAC,CAAC,OAAOQ,KAAK,EAAE;QAAA,IAAAC,eAAA,EAAAC,oBAAA;QACdhB,UAAU,CAAC;UACTS,IAAI,EAAE,OAAO;UACbF,IAAI,EAAE,EAAAQ,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBV,IAAI,cAAAW,oBAAA,uBAApBA,oBAAA,CAAsBjB,OAAO,KAAI;QACzC,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EAED,MAAMkB,WAAW,GAAIC,GAAG,IAAK;IAC3BC,OAAO,CAACL,KAAK,CAAC,mBAAmB,EAAEI,GAAG,CAAC;EACzC,CAAC;EAED,oBACEtB,OAAA;IAAKwB,SAAS,EAAC,+CAA+C;IAAAC,QAAA,gBAC5DzB,OAAA;MAAIwB,SAAS,EAAC,uCAAuC;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEzE1B,OAAO,iBACNH,OAAA;MAAGwB,SAAS,EAAE,kBAAkBrB,OAAO,CAACU,IAAI,KAAK,OAAO,GAAG,YAAY,GAAG,cAAc,EAAG;MAAAY,QAAA,EACxFtB,OAAO,CAACQ;IAAI;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CACJ,eAED7B,OAAA,CAAC8B,SAAS;MAACC,KAAK,EAAE,GAAI;MAACC,OAAO,EAAEX,WAAY;MAACY,MAAM,EAAEzB,UAAW;MAAC0B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1F,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA7CID,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AA+Cf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}